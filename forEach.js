
/** 
 * for문은 함수형 프로그래밍이 추구하는 방향성이 아니다.
 * 조건문과 반복문은 로직의 흐름을 이해하기 어렵게 하고 변수의 사용을 억제하여 상태 변경을 회피하는 프로그래밍 패러다임이 함수형 프로그래밍이다.
 * forEach 메서드는 반복문을 추상화하여 for문을 대체할 수 있다.
 * forEach 메서드는 내부에서 반복문을 돌려서 자신을 호출한 배열을 순회하면서 콜백함수를 인자를 받아 반복 호출한다.
 */

const numbers = [1,2,3,4];
const pows = []; //출력할 빈 배열

/** number 배열의 모든 요소를 순회하면서 콜백함수를 반복 호출한다.
 * 호출하면서 배열의 요소와 인덱스, 배열 자체(this. 여기서는 numbers) 
 *  여기서 콜백함수의 호출 횟수는 배열의 길이와 같다. 
 */
numbers.forEach(item => pows.push(item ** 2)); 
console.log(pows); //(3) [1, 4, 9]

[1,2,3].forEach((item,idx, arr) => {
    console.log(`요소값: ${item}, 인덱스: ${idx}, this: ${arr}`);
});

/*
(3) [1, 4, 9]
요소값: 1, 인덱스: 0, this: 1,2,3
요소값: 2, 인덱스: 1, this: 1,2,3
요소값: 3, 인덱스: 2, this: 1,2,3
*/